# Если не передали аргумент то выход из программы
if ARGV.empty?
  puts 'Please enter the string'
  exit
end
# Берём первый аргумент из массива аргументов
s = ARGV.first

# Хеш скобок где ключ это закрывающая скобка а значение открывающая
bracket = {
  ']' => '[',
  '}' => '{',
  ')' => '('
}

opening = bracket.values # Массив открывающих скобок ['[', '{', '(']
closing = bracket.keys # Массив закрывающих скобок [']', '}', ')']

opened = [] # Массив в который добавляются не закрытые скобки из строки

valid = false # Флаг для валидации строки

# Цикл по строке (для каждого символа проверяем)
s.each_char do |c|
  # Если символ это открывающая скобка то добавляем его в массив не закрытых скобок (скобок которые нужно зкрыть)
  opened.push(c) if opening.include?(c)
  # Если символ это закрывающая скобка
  if closing.include?(c)
    # Находим пару закрывающей скобки по хешу bracket (bracket[")"] => "(")
    # Если найденная открывающая скобка не является последней в массиве не закрытых скобок
    if bracket[c] != opened.last
      # Выводим что строка не валидная
      puts "\"#{s}\" => #{valid}"
      # Выходим из программы
      exit
    else
      # Иначе если найденная открывающая скобка является последней в массиве не закрытых скобок
      # Удаляем её из массива не закрытых скобок (считаем её закрытой)
      opened.pop # pop удаляет последний элемент массива
    end
  end
end

# Если массив не закрытых скобок пустой (т.е. мы зкарыли все скобки)
# То строка валидная
# Если в массиве не закрытых скобок осталась хоть одна не закрытая скобка
# То строка не валидная
valid = opened.empty?
# Вывод результата
puts "\"#{s}\" => #{valid}"
